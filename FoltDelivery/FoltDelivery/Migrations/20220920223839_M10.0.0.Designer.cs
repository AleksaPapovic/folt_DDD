// <auto-generated />
using System;
using System.Collections.Generic;
using FoltDelivery.Core.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FoltDelivery.Migrations
{
    [DbContext(typeof(FoltDeliveryDbContext))]
    [Migration("20220920223839_M10.0.0")]
    partial class M1000
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FoltDelivery.Core.Domain.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RestaurantId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("DomainEvent");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.CustomerAggregate.Loyalty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("integer");

                    b.Property<int>("TypeName")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Loyalty");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.CustomerAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Blocked")
                        .HasColumnType("boolean");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<List<Guid>>("CustomerOrdersIds")
                        .HasColumnType("uuid[]");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("text");

                    b.Property<List<Guid>>("DeliveryOrdersIds")
                        .HasColumnType("uuid[]");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("InitialVersion")
                        .HasColumnType("integer");

                    b.Property<bool>("LogicalDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("InitialVersion")
                        .HasColumnType("integer");

                    b.Property<bool>("LogicalDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RestaurantMenuId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantMenuId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "Vojvodjanska",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "TRIKOLORE",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff17"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "KAPRIĆOZA",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("22223344-5566-7788-99aa-bbccddeeff10"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "Palacinka Rafaelo",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff01"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("22223344-5566-7788-99aa-bbccddeeff11"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "Palacinka Oreo",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff01"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                            Type = 1,
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("22223344-5566-7788-99aa-bbccddeeff12"),
                            Description = "Pica sa tradicijom",
                            Image = "",
                            InitialVersion = 0,
                            LogicalDeleted = false,
                            Name = "Palacinka Nutela",
                            Quantity = 1,
                            RestaurantId = new Guid("11223344-5566-7788-99aa-bbccddeeff01"),
                            RestaurantMenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                            Type = 1,
                            Version = 0
                        });
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff06"),
                            City = "Novi Sad",
                            HouseNumber = 1,
                            PostalCode = 21000,
                            State = "Srbija",
                            StreetName = ""
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff08"),
                            City = "Novi Sad",
                            HouseNumber = 1,
                            PostalCode = 21000,
                            State = "Srbija",
                            StreetName = ""
                        });
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff05"),
                            AddressId = new Guid("11223344-5566-7788-99aa-bbccddeeff06"),
                            Latitude = 45.247999999999998,
                            Longitude = 19.842500000000001
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff09"),
                            AddressId = new Guid("11223344-5566-7788-99aa-bbccddeeff08"),
                            Latitude = 45.258899999999997,
                            Longitude = 19.835699999999999
                        });
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("InitialVersion")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("LogoId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MenuId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff00"),
                            Deleted = false,
                            InitialVersion = 0,
                            LocationId = new Guid("11223344-5566-7788-99aa-bbccddeeff05"),
                            LogoId = 1,
                            MenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                            Name = "Pizzeria Ciao",
                            Status = 1,
                            Type = "Restaurant",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff01"),
                            Deleted = false,
                            InitialVersion = 0,
                            LocationId = new Guid("11223344-5566-7788-99aa-bbccddeeff09"),
                            LogoId = 2,
                            MenuId = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                            Name = "Boom boom pancakes",
                            Status = 1,
                            Type = "FastFood",
                            Version = 0
                        });
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.RestaurantMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RestaurantMenu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff15")
                        },
                        new
                        {
                            Id = new Guid("11223344-5566-7788-99aa-bbccddeeff16")
                        },
                        new
                        {
                            Id = new Guid("21223344-5566-7788-99aa-bbccddeeff10")
                        });
                });

            modelBuilder.Entity("FoltDelivery.Core.Domain.DomainEvent", b =>
                {
                    b.HasOne("FoltDelivery.Domain.Aggregates.ProductAggregate.Product", null)
                        .WithMany("Changes")
                        .HasForeignKey("ProductId");

                    b.HasOne("FoltDelivery.Domain.Aggregates.ProductAggregate.Product", null)
                        .WithMany("UncommittedEvents")
                        .HasForeignKey("ProductId1");

                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Restaurant", null)
                        .WithMany("Changes")
                        .HasForeignKey("RestaurantId");

                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Restaurant", null)
                        .WithMany("UncommittedEvents")
                        .HasForeignKey("RestaurantId1");

                    b.HasOne("FoltDelivery.Domain.Aggregates.CustomerAggregate.User", null)
                        .WithMany("Changes")
                        .HasForeignKey("UserId");

                    b.HasOne("FoltDelivery.Domain.Aggregates.CustomerAggregate.User", null)
                        .WithMany("UncommittedEvents")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.CustomerAggregate.User", b =>
                {
                    b.HasOne("FoltDelivery.Domain.Aggregates.CustomerAggregate.Loyalty", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.RestaurantMenu", null)
                        .WithMany("_menuProducts")
                        .HasForeignKey("RestaurantMenuId");

                    b.OwnsOne("FoltDelivery.Domain.Aggregates.ProductAggregate.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Amount")
                                .HasColumnType("double precision");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.HasData(
                                new
                                {
                                    ProductId = new Guid("11223344-5566-7788-99aa-bbccddeeff15"),
                                    Amount = 1300.0
                                },
                                new
                                {
                                    ProductId = new Guid("11223344-5566-7788-99aa-bbccddeeff16"),
                                    Amount = 1650.0
                                },
                                new
                                {
                                    ProductId = new Guid("11223344-5566-7788-99aa-bbccddeeff17"),
                                    Amount = 1350.0
                                },
                                new
                                {
                                    ProductId = new Guid("22223344-5566-7788-99aa-bbccddeeff10"),
                                    Amount = 280.0
                                },
                                new
                                {
                                    ProductId = new Guid("22223344-5566-7788-99aa-bbccddeeff11"),
                                    Amount = 360.0
                                },
                                new
                                {
                                    ProductId = new Guid("22223344-5566-7788-99aa-bbccddeeff12"),
                                    Amount = 240.0
                                });
                        });
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Location", b =>
                {
                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Restaurant", b =>
                {
                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("FoltDelivery.Domain.Aggregates.RestaurantAggregate.RestaurantMenu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId");
                });
#pragma warning restore 612, 618
        }
    }
}
